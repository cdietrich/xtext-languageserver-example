buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.xtext:xtext-gradle-plugin:1.0.15'
		classpath 'com.moowork.gradle:gradle-node-plugin:0.13'
	}
}

plugins {
	id 'com.moowork.node' version '1.1.1'
	id 'net.researchgate.release' version '2.4.0'
}

node {
	version = '6.2.2'
	npmVersion = '3.10.6'
	download = true
}

// Configuration for Xtext projects
configure(subprojects.findAll { it.name.startsWith('org.xtext') }) {

	ext.xtextVersion = '2.12.0-SNAPSHOT'
	repositories {
		maven { url 'http://services.typefox.io/open-source/jenkins/job/lsp4j/job/master/lastSuccessfulBuild/artifact/build/maven-repository/' }
		maven { url 'http://services.typefox.io/open-source/jenkins/job/lsp4j/job/master/lastSuccessfulBuild/artifact/build/maven-repository/' }
		maven { url 'http://services.typefox.io/open-source/jenkins/job/xtext-lib/job/master/lastStableBuild/artifact/build/maven-repository/' }
		maven { url 'http://services.typefox.io/open-source/jenkins/job/xtext-core/job/master/lastStableBuild/artifact/build/maven-repository/' }
		maven { url 'http://services.typefox.io/open-source/jenkins/job/xtext-extras/job/master/lastStableBuild/artifact/build/maven-repository/' }
		maven { url 'http://services.typefox.io/open-source/jenkins/job/xtext-xtend/job/master/lastStableBuild/artifact/build/maven-repository/' }
		maven {
			url 'https://oss.sonatype.org/content/repositories/snapshots'
		}
		jcenter()
	}
	
	apply plugin: 'java'
	apply plugin: 'org.xtext.xtend'
	apply from: "${rootDir}/gradle/source-layout.gradle"
	apply from: "${rootDir}/gradle/maven-deployment.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	
	group = 'org.xtext.example.mydsl'
	version = '1.0.0-SNAPSHOT'
	
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
	
	configurations.all {
		exclude group: 'asm'
	}

}

task npmInstallVsce(type: NpmTask, dependsOn: npmSetup) {
	ext.destPath = "$rootProject.projectDir/node_modules/vsce" 
	outputs.dir(destPath)
	group 'Node'
	description 'Installs the NodeJS package "Visual Studio Code Extension Manager"'
	args = [ 'install', 'vsce' ]
}

// Configuration for vscode projects
configure(subprojects.findAll { it.name.startsWith('vscode') }) {

	apply plugin: 'com.moowork.node'

	def inputFiles = fileTree(
		dir: projectDir, 
		excludes: [ 'out/**', '.gitignore', '.gradle/**', 'build/**', '*.gradle' ]
	)

	npmInstall {
		inputs.files(inputFiles)
		outputs.dir('out')
	}

	task vscodeExtension(dependsOn: [npmInstall, npmInstallVsce], type: NodeTask) {
		ext.destDir = new File(buildDir, 'vscode')
		ext.archiveName = "$project.name-${project.version}.vsix"
		ext.destPath = "$destDir/$archiveName"
		inputs.with {
			files inputFiles
			dir npmInstallVsce.destPath
		}
		outputs.dir destDir
		doFirst {
			destDir.mkdirs()
		}
		script = file("$npmInstallVsce.destPath/out/vsce")
		args = [ 'package', '--out', destPath ]
		execOverrides {
			workingDir = projectDir
		}
	}

	task clean {
		doLast {
			delete vscodeExtension.destDir
			delete 'out' // output of npmInstall - don't want to delete node_modules
		}
		
	}

}

plugins.withType(com.moowork.gradle.node.NodePlugin) {
	node {
		workDir = file("$rootProject.buildDir/nodejs")
		nodeModulesDir = rootProject.projectDir
	}
}

task updateVersions {
	doLast {
		def versionPattern = /\d+.\d+(.\d+)?/
	    def encoding = 'UTF-8'
	    def filesToUpdate = [
			new File('vscode-extension', 'package.json'),
			new File('vscode-extension-self-contained', 'package.json')
		]

	    // String replacements - isn't long enough to justify advanced code ;)
		filesToUpdate.forEach { file ->
			String text = file.getText(encoding)
			text = text.replaceAll("\"version\": \"$versionPattern\",", "\"version\": \"$project.version\",")
			file.setText(text, encoding)
		}
	}
}

release {
    tagTemplate = 'v${version}'
	preTagCommitMessage = '[release] pre tag commit: '
    tagCommitMessage = '[release] creating tag: '
    newVersionCommitMessage = '[release] new version commit: '
    failOnSnapshotDependencies = false
}
updateVersions.shouldRunAfter tasks.getByName('confirmReleaseVersion')
tasks.getByName('commitNewVersion').dependsOn updateVersions

// Workaround for issue https://github.com/researchgate/gradle-release/issues/144
task build {
	dependsOn subprojects.findResults { it.tasks.findByName('build') }
}
